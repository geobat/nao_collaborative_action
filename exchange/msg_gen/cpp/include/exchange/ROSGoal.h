/* Auto-generated by genmsg_cpp for file /home/geoffray/ros_workspace/exchange/msg/ROSGoal.msg */
#ifndef EXCHANGE_MESSAGE_ROSGOAL_H
#define EXCHANGE_MESSAGE_ROSGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace exchange
{
template <class ContainerAllocator>
struct ROSGoal_ {
  typedef ROSGoal_<ContainerAllocator> Type;

  ROSGoal_()
  : GOAL_(0)
  {
  }

  ROSGoal_(const ContainerAllocator& _alloc)
  : GOAL_(0)
  {
  }

  typedef int32_t _GOAL__type;
  int32_t GOAL_;


  typedef boost::shared_ptr< ::exchange::ROSGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exchange::ROSGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ROSGoal
typedef  ::exchange::ROSGoal_<std::allocator<void> > ROSGoal;

typedef boost::shared_ptr< ::exchange::ROSGoal> ROSGoalPtr;
typedef boost::shared_ptr< ::exchange::ROSGoal const> ROSGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::exchange::ROSGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::exchange::ROSGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace exchange

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::exchange::ROSGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::exchange::ROSGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::exchange::ROSGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c7b14ba257795c9c39554f76f2fa8ca0";
  }

  static const char* value(const  ::exchange::ROSGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc7b14ba257795c9cULL;
  static const uint64_t static_value2 = 0x39554f76f2fa8ca0ULL;
};

template<class ContainerAllocator>
struct DataType< ::exchange::ROSGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/ROSGoal";
  }

  static const char* value(const  ::exchange::ROSGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::exchange::ROSGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
int32 GOAL_\n\
\n\
";
  }

  static const char* value(const  ::exchange::ROSGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::exchange::ROSGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::exchange::ROSGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.GOAL_);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ROSGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exchange::ROSGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::exchange::ROSGoal_<ContainerAllocator> & v) 
  {
    s << indent << "GOAL_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GOAL_);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXCHANGE_MESSAGE_ROSGOAL_H

