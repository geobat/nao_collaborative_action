/* Auto-generated by genmsg_cpp for file /home/geoffray/ros_workspace/exchange/msg/ROSFeedback.msg */
#ifndef EXCHANGE_MESSAGE_ROSFEEDBACK_H
#define EXCHANGE_MESSAGE_ROSFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace exchange
{
template <class ContainerAllocator>
struct ROSFeedback_ {
  typedef ROSFeedback_<ContainerAllocator> Type;

  ROSFeedback_()
  : FEEDBACK_(0)
  {
  }

  ROSFeedback_(const ContainerAllocator& _alloc)
  : FEEDBACK_(0)
  {
  }

  typedef int32_t _FEEDBACK__type;
  int32_t FEEDBACK_;


  typedef boost::shared_ptr< ::exchange::ROSFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exchange::ROSFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ROSFeedback
typedef  ::exchange::ROSFeedback_<std::allocator<void> > ROSFeedback;

typedef boost::shared_ptr< ::exchange::ROSFeedback> ROSFeedbackPtr;
typedef boost::shared_ptr< ::exchange::ROSFeedback const> ROSFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::exchange::ROSFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::exchange::ROSFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace exchange

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::exchange::ROSFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::exchange::ROSFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::exchange::ROSFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd37041da8d6188d42b48d39e7cc0be0";
  }

  static const char* value(const  ::exchange::ROSFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfd37041da8d6188dULL;
  static const uint64_t static_value2 = 0x42b48d39e7cc0be0ULL;
};

template<class ContainerAllocator>
struct DataType< ::exchange::ROSFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/ROSFeedback";
  }

  static const char* value(const  ::exchange::ROSFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::exchange::ROSFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
int32 FEEDBACK_\n\
\n\
\n\
";
  }

  static const char* value(const  ::exchange::ROSFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::exchange::ROSFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::exchange::ROSFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.FEEDBACK_);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ROSFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exchange::ROSFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::exchange::ROSFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "FEEDBACK_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.FEEDBACK_);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXCHANGE_MESSAGE_ROSFEEDBACK_H

