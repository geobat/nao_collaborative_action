/* Auto-generated by genmsg_cpp for file /home/geoffray/ros_workspace/exchange/srv/ArmReadyBT.srv */
#ifndef EXCHANGE_SERVICE_ARMREADYBT_H
#define EXCHANGE_SERVICE_ARMREADYBT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace exchange
{
template <class ContainerAllocator>
struct ArmReadyBTRequest_ {
  typedef ArmReadyBTRequest_<ContainerAllocator> Type;

  ArmReadyBTRequest_()
  : NAO(0)
  , arm(0)
  {
  }

  ArmReadyBTRequest_(const ContainerAllocator& _alloc)
  : NAO(0)
  , arm(0)
  {
  }

  typedef int32_t _NAO_type;
  int32_t NAO;

  typedef int32_t _arm_type;
  int32_t arm;


  typedef boost::shared_ptr< ::exchange::ArmReadyBTRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exchange::ArmReadyBTRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ArmReadyBTRequest
typedef  ::exchange::ArmReadyBTRequest_<std::allocator<void> > ArmReadyBTRequest;

typedef boost::shared_ptr< ::exchange::ArmReadyBTRequest> ArmReadyBTRequestPtr;
typedef boost::shared_ptr< ::exchange::ArmReadyBTRequest const> ArmReadyBTRequestConstPtr;


template <class ContainerAllocator>
struct ArmReadyBTResponse_ {
  typedef ArmReadyBTResponse_<ContainerAllocator> Type;

  ArmReadyBTResponse_()
  {
  }

  ArmReadyBTResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::exchange::ArmReadyBTResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exchange::ArmReadyBTResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ArmReadyBTResponse
typedef  ::exchange::ArmReadyBTResponse_<std::allocator<void> > ArmReadyBTResponse;

typedef boost::shared_ptr< ::exchange::ArmReadyBTResponse> ArmReadyBTResponsePtr;
typedef boost::shared_ptr< ::exchange::ArmReadyBTResponse const> ArmReadyBTResponseConstPtr;

struct ArmReadyBT
{

typedef ArmReadyBTRequest Request;
typedef ArmReadyBTResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ArmReadyBT
} // namespace exchange

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::exchange::ArmReadyBTRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::exchange::ArmReadyBTRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::exchange::ArmReadyBTRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d090919db246d41a7da74bd56eadc6ec";
  }

  static const char* value(const  ::exchange::ArmReadyBTRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd090919db246d41aULL;
  static const uint64_t static_value2 = 0x7da74bd56eadc6ecULL;
};

template<class ContainerAllocator>
struct DataType< ::exchange::ArmReadyBTRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/ArmReadyBTRequest";
  }

  static const char* value(const  ::exchange::ArmReadyBTRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::exchange::ArmReadyBTRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 NAO\n\
int32 arm\n\
\n\
";
  }

  static const char* value(const  ::exchange::ArmReadyBTRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::exchange::ArmReadyBTRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::exchange::ArmReadyBTResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::exchange::ArmReadyBTResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::exchange::ArmReadyBTResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::exchange::ArmReadyBTResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::exchange::ArmReadyBTResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/ArmReadyBTResponse";
  }

  static const char* value(const  ::exchange::ArmReadyBTResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::exchange::ArmReadyBTResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::exchange::ArmReadyBTResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::exchange::ArmReadyBTResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::exchange::ArmReadyBTRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.NAO);
    stream.next(m.arm);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArmReadyBTRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::exchange::ArmReadyBTResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArmReadyBTResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<exchange::ArmReadyBT> {
  static const char* value() 
  {
    return "d090919db246d41a7da74bd56eadc6ec";
  }

  static const char* value(const exchange::ArmReadyBT&) { return value(); } 
};

template<>
struct DataType<exchange::ArmReadyBT> {
  static const char* value() 
  {
    return "exchange/ArmReadyBT";
  }

  static const char* value(const exchange::ArmReadyBT&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<exchange::ArmReadyBTRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d090919db246d41a7da74bd56eadc6ec";
  }

  static const char* value(const exchange::ArmReadyBTRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<exchange::ArmReadyBTRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/ArmReadyBT";
  }

  static const char* value(const exchange::ArmReadyBTRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<exchange::ArmReadyBTResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d090919db246d41a7da74bd56eadc6ec";
  }

  static const char* value(const exchange::ArmReadyBTResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<exchange::ArmReadyBTResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/ArmReadyBT";
  }

  static const char* value(const exchange::ArmReadyBTResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EXCHANGE_SERVICE_ARMREADYBT_H

