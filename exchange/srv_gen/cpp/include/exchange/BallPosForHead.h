/* Auto-generated by genmsg_cpp for file /home/geoffray/ros_workspace/exchange/srv/BallPosForHead.srv */
#ifndef EXCHANGE_SERVICE_BALLPOSFORHEAD_H
#define EXCHANGE_SERVICE_BALLPOSFORHEAD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace exchange
{
template <class ContainerAllocator>
struct BallPosForHeadRequest_ {
  typedef BallPosForHeadRequest_<ContainerAllocator> Type;

  BallPosForHeadRequest_()
  : min_h(0)
  , max_h(0)
  {
  }

  BallPosForHeadRequest_(const ContainerAllocator& _alloc)
  : min_h(0)
  , max_h(0)
  {
  }

  typedef int32_t _min_h_type;
  int32_t min_h;

  typedef int32_t _max_h_type;
  int32_t max_h;


  typedef boost::shared_ptr< ::exchange::BallPosForHeadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exchange::BallPosForHeadRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BallPosForHeadRequest
typedef  ::exchange::BallPosForHeadRequest_<std::allocator<void> > BallPosForHeadRequest;

typedef boost::shared_ptr< ::exchange::BallPosForHeadRequest> BallPosForHeadRequestPtr;
typedef boost::shared_ptr< ::exchange::BallPosForHeadRequest const> BallPosForHeadRequestConstPtr;


template <class ContainerAllocator>
struct BallPosForHeadResponse_ {
  typedef BallPosForHeadResponse_<ContainerAllocator> Type;

  BallPosForHeadResponse_()
  : pos(0)
  {
  }

  BallPosForHeadResponse_(const ContainerAllocator& _alloc)
  : pos(0)
  {
  }

  typedef int64_t _pos_type;
  int64_t pos;


  typedef boost::shared_ptr< ::exchange::BallPosForHeadResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exchange::BallPosForHeadResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BallPosForHeadResponse
typedef  ::exchange::BallPosForHeadResponse_<std::allocator<void> > BallPosForHeadResponse;

typedef boost::shared_ptr< ::exchange::BallPosForHeadResponse> BallPosForHeadResponsePtr;
typedef boost::shared_ptr< ::exchange::BallPosForHeadResponse const> BallPosForHeadResponseConstPtr;

struct BallPosForHead
{

typedef BallPosForHeadRequest Request;
typedef BallPosForHeadResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BallPosForHead
} // namespace exchange

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::exchange::BallPosForHeadRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::exchange::BallPosForHeadRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::exchange::BallPosForHeadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6fbdb3f4f625c750fdfa49da0b25855c";
  }

  static const char* value(const  ::exchange::BallPosForHeadRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6fbdb3f4f625c750ULL;
  static const uint64_t static_value2 = 0xfdfa49da0b25855cULL;
};

template<class ContainerAllocator>
struct DataType< ::exchange::BallPosForHeadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/BallPosForHeadRequest";
  }

  static const char* value(const  ::exchange::BallPosForHeadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::exchange::BallPosForHeadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 min_h\n\
int32 max_h\n\
\n\
";
  }

  static const char* value(const  ::exchange::BallPosForHeadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::exchange::BallPosForHeadRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::exchange::BallPosForHeadResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::exchange::BallPosForHeadResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::exchange::BallPosForHeadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ebf28f8999fe57e1eb3bfb21c1acfef7";
  }

  static const char* value(const  ::exchange::BallPosForHeadResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xebf28f8999fe57e1ULL;
  static const uint64_t static_value2 = 0xeb3bfb21c1acfef7ULL;
};

template<class ContainerAllocator>
struct DataType< ::exchange::BallPosForHeadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/BallPosForHeadResponse";
  }

  static const char* value(const  ::exchange::BallPosForHeadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::exchange::BallPosForHeadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 pos\n\
\n\
\n\
";
  }

  static const char* value(const  ::exchange::BallPosForHeadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::exchange::BallPosForHeadResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::exchange::BallPosForHeadRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.min_h);
    stream.next(m.max_h);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BallPosForHeadRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::exchange::BallPosForHeadResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BallPosForHeadResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<exchange::BallPosForHead> {
  static const char* value() 
  {
    return "dc8602d6c6bd69c5f7e48c7d10bea4cc";
  }

  static const char* value(const exchange::BallPosForHead&) { return value(); } 
};

template<>
struct DataType<exchange::BallPosForHead> {
  static const char* value() 
  {
    return "exchange/BallPosForHead";
  }

  static const char* value(const exchange::BallPosForHead&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<exchange::BallPosForHeadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc8602d6c6bd69c5f7e48c7d10bea4cc";
  }

  static const char* value(const exchange::BallPosForHeadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<exchange::BallPosForHeadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/BallPosForHead";
  }

  static const char* value(const exchange::BallPosForHeadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<exchange::BallPosForHeadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc8602d6c6bd69c5f7e48c7d10bea4cc";
  }

  static const char* value(const exchange::BallPosForHeadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<exchange::BallPosForHeadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "exchange/BallPosForHead";
  }

  static const char* value(const exchange::BallPosForHeadResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EXCHANGE_SERVICE_BALLPOSFORHEAD_H

